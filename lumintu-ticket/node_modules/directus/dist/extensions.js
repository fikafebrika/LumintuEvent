"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerExtensionHooks = exports.registerExtensionEndpoints = exports.getAppExtensionSource = exports.listExtensions = exports.initializeExtensions = void 0;
const express_1 = __importDefault(require("express"));
const path_1 = __importDefault(require("path"));
const node_1 = require("@directus/shared/utils/node");
const constants_1 = require("@directus/shared/constants");
const database_1 = __importDefault(require("./database"));
const emitter_1 = __importDefault(require("./emitter"));
const env_1 = __importDefault(require("./env"));
const exceptions = __importStar(require("./exceptions"));
const logger_1 = __importDefault(require("./logger"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const get_schema_1 = require("./utils/get-schema");
const services = __importStar(require("./services"));
const node_cron_1 = require("node-cron");
const constants_2 = require("@directus/shared/constants");
const rollup_1 = require("rollup");
// @TODO Remove this once a new version of @rollup/plugin-virtual has been released
// @ts-expect-error
const plugin_virtual_1 = __importDefault(require("@rollup/plugin-virtual"));
const plugin_alias_1 = __importDefault(require("@rollup/plugin-alias"));
const url_1 = require("./utils/url");
const get_module_default_1 = __importDefault(require("./utils/get-module-default"));
let extensions = [];
let extensionBundles = {};
const registeredHooks = [];
async function initializeExtensions() {
    try {
        await (0, node_1.ensureExtensionDirs)(env_1.default.EXTENSIONS_PATH, env_1.default.SERVE_APP ? constants_1.EXTENSION_TYPES : constants_1.API_EXTENSION_TYPES);
        extensions = await getExtensions();
    }
    catch (err) {
        logger_1.default.warn(`Couldn't load extensions`);
        logger_1.default.warn(err);
    }
    if (env_1.default.SERVE_APP) {
        extensionBundles = await generateExtensionBundles();
    }
    const loadedExtensions = listExtensions();
    if (loadedExtensions.length > 0) {
        logger_1.default.info(`Loaded extensions: ${loadedExtensions.join(', ')}`);
    }
}
exports.initializeExtensions = initializeExtensions;
function listExtensions(type) {
    if (type === undefined) {
        return extensions.map((extension) => extension.name);
    }
    else {
        return extensions.filter((extension) => extension.type === type).map((extension) => extension.name);
    }
}
exports.listExtensions = listExtensions;
function getAppExtensionSource(type) {
    return extensionBundles[type];
}
exports.getAppExtensionSource = getAppExtensionSource;
function registerExtensionEndpoints(router) {
    const endpoints = extensions.filter((extension) => extension.type === 'endpoint');
    registerEndpoints(endpoints, router);
}
exports.registerExtensionEndpoints = registerExtensionEndpoints;
function registerExtensionHooks() {
    const hooks = extensions.filter((extension) => extension.type === 'hook');
    registerHooks(hooks);
}
exports.registerExtensionHooks = registerExtensionHooks;
async function getExtensions() {
    const packageExtensions = await (0, node_1.getPackageExtensions)('.', env_1.default.SERVE_APP ? constants_1.EXTENSION_PACKAGE_TYPES : constants_1.API_EXTENSION_PACKAGE_TYPES);
    const localExtensions = await (0, node_1.getLocalExtensions)(env_1.default.EXTENSIONS_PATH, env_1.default.SERVE_APP ? constants_1.EXTENSION_TYPES : constants_1.API_EXTENSION_TYPES);
    return [...packageExtensions, ...localExtensions];
}
async function generateExtensionBundles() {
    const sharedDepsMapping = await getSharedDepsMapping(constants_1.APP_SHARED_DEPS);
    const internalImports = Object.entries(sharedDepsMapping).map(([name, path]) => ({
        find: name,
        replacement: path,
    }));
    const bundles = {};
    for (const extensionType of constants_1.APP_EXTENSION_TYPES) {
        const entry = (0, node_1.generateExtensionsEntry)(extensionType, extensions);
        const bundle = await (0, rollup_1.rollup)({
            input: 'entry',
            external: Object.values(sharedDepsMapping),
            makeAbsoluteExternalsRelative: false,
            plugins: [(0, plugin_virtual_1.default)({ entry }), (0, plugin_alias_1.default)({ entries: internalImports })],
        });
        const { output } = await bundle.generate({ format: 'es', compact: true });
        bundles[extensionType] = output[0].code;
        await bundle.close();
    }
    return bundles;
}
async function getSharedDepsMapping(deps) {
    const appDir = await fs_extra_1.default.readdir(path_1.default.join((0, node_1.resolvePackage)('@directus/app'), 'dist'));
    const depsMapping = {};
    for (const dep of deps) {
        const depName = appDir.find((file) => dep.replace(/\//g, '_') === file.substring(0, file.indexOf('.')));
        if (depName) {
            const depUrl = new url_1.Url(env_1.default.PUBLIC_URL).addPath('admin', depName);
            depsMapping[dep] = depUrl.toString({ rootRelative: true });
        }
        else {
            logger_1.default.warn(`Couldn't find shared extension dependency "${dep}"`);
        }
    }
    return depsMapping;
}
function registerHooks(hooks) {
    for (const hook of hooks) {
        try {
            registerHook(hook);
        }
        catch (error) {
            logger_1.default.warn(`Couldn't register hook "${hook.name}"`);
            logger_1.default.warn(error);
        }
    }
    function registerHook(hook) {
        var _a;
        const hookPath = path_1.default.resolve(hook.path, hook.entrypoint || '');
        const hookInstance = require(hookPath);
        // Make sure hooks are only registered once
        if (registeredHooks.includes(hookPath)) {
            return;
        }
        else {
            registeredHooks.push(hookPath);
        }
        const register = (0, get_module_default_1.default)(hookInstance);
        const events = register({ services, exceptions, env: env_1.default, database: (0, database_1.default)(), logger: logger_1.default, getSchema: get_schema_1.getSchema });
        for (const [event, handler] of Object.entries(events)) {
            if (event.startsWith('cron(')) {
                const cron = (_a = event.match(constants_2.REGEX_BETWEEN_PARENS)) === null || _a === void 0 ? void 0 : _a[1];
                if (!cron || (0, node_cron_1.validate)(cron) === false) {
                    logger_1.default.warn(`Couldn't register cron hook. Provided cron is invalid: ${cron}`);
                }
                else {
                    (0, node_cron_1.schedule)(cron, async () => {
                        try {
                            await handler();
                        }
                        catch (error) {
                            logger_1.default.error(error);
                        }
                    });
                }
            }
            else {
                emitter_1.default.on(event, handler);
            }
        }
    }
}
function registerEndpoints(endpoints, router) {
    for (const endpoint of endpoints) {
        try {
            registerEndpoint(endpoint);
        }
        catch (error) {
            logger_1.default.warn(`Couldn't register endpoint "${endpoint.name}"`);
            logger_1.default.warn(error);
        }
    }
    function registerEndpoint(endpoint) {
        const endpointPath = path_1.default.resolve(endpoint.path, endpoint.entrypoint || '');
        const endpointInstance = require(endpointPath);
        const mod = (0, get_module_default_1.default)(endpointInstance);
        const register = typeof mod === 'function' ? mod : mod.handler;
        const pathName = typeof mod === 'function' ? endpoint.name : mod.id;
        const scopedRouter = express_1.default.Router();
        router.use(`/${pathName}`, scopedRouter);
        register(scopedRouter, { services, exceptions, env: env_1.default, database: (0, database_1.default)(), logger: logger_1.default, getSchema: get_schema_1.getSchema });
    }
}
