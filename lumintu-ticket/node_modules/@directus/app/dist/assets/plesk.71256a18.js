var n='# Shared Hosting with Plesk\n\nOn many shared hosts you are not allowed to directly invoke node commands but you have to use the Plesk configuration\npanel instead. Unfortunately, Plesk does not allow the interactive execution of node scripts. Therefore we can\'t use\nDirectus\' `init` script and have to set up the project by our own.\n\n::: tip Successful tests\n\nThis approach has successfully been tested with a webhosting offer from netcup.\n\n:::\n\n## Setup database\n\nFirst, make sure that you\'ve already created a database and a user for it. We will use MySQL in this guide. When you\nplan to use SQLite you can ignore this.\n\n## Setup a project folder\n\nOn the server, create a project folder with 4 files in it.\n\n### 1. Add .env file\n\nThis file is used to configure Directus. Normally, the `init` script would create it for us. So now we have to do it\nmanually. You can just copy it from another Directus installation or use the\n[example file](https://github.com/directus/directus/blob/main/api/example.env) of Directus and then modify it (see\n[Environment Variables](/reference/environment-variables/)). You likely have to adjust the database information.\n\nIf you have not already a user in the database make sure to add a first user by adding the following two lines so that\nyou can later login to Directus.\n\n```\nADMIN_EMAIL="admin@example.com"\nADMIN_PASSWORD="password"\n```\n\n::: tip Choosing a Port\n\nSince Plesk uses the [Phusion Passenger](https://www.phusionpassenger.com/) application server to serve Node.js apps you\ndo not need to worry about choosing a specific port. Just use an arbitrary number. To quote the Passenger docs:\n\n> When run in Passenger, the port number that you pass to listen() is irrelevant and has no effect. Passenger always\n> makes the app listen on a random Unix domain socket.\n\n:::\n\n### 2. Add package.json\n\nAdd Directus and your database connector as a dependency. To execute Directus\' `bootstrap` command you also have to add\na script entry for it.\n\n```json\n{\n\t"scripts": {\n\t\t"bootstrap": "directus bootstrap"\n\t},\n\t"dependencies": {\n\t\t"directus": "*",\n\t\t"mysql": "^2.18.1"\n\t}\n}\n```\n\n### 3. Add application startup file index.js\n\nInstead of a start command, Plesk wants a startup file. So create a `index.js` with the following content:\n\n```js\nvar { startServer } = require(\'directus/dist/server\');\n\nstartServer();\n```\n\n### 4. Add .npmrc\n\nLastly, we need to make a small configuration for npm by creating a `.npmrc` file with the following content:\n\n```\nscripts-prepend-node-path=true\n```\n\n## Activate and configure node.js\n\nIn Plesk, choose your website and click "Node.js". You should then see a button "Enable Node.js" and click on it.\n\nNow, change the "Document root" and "Application root" to the location of your project folder. "Application startup\nfile" must point to the `index.js` file from the former step. The screen should now look like this:\n\n![Plesk Screenshot](../../assets/guides/installation/plesk-screenshot.png)\n\nYou can now install the dependencies by clicking on the button "NPM install".\n\n## Bootstrap Directus\n\nTo set up the database tables (and the first user) for Directus, click on the button "Run script" and input `bootstrap`.\nYou get the console output after the script has run through.\n\n::: tip Current Issue of Argon2\n\nYou may run into an error of argon2 telling you that glibc is missing. If that\'s the case try adding and running this\nscript entry to your package.json:\n\n```json\n    "scripts" {\n        "argon2-rebuild": "npm rebuild argon2 --build-from-source",\n        <...>\n    }\n\n```\n\nAfterwards try `bootstrap` again.\n\n:::\n\n## Test Directus Access\n\nThe Directus app should now work under your configured url. If not, try changing the development mode and wait a couple\nof seconds.\n';export{n as default};
